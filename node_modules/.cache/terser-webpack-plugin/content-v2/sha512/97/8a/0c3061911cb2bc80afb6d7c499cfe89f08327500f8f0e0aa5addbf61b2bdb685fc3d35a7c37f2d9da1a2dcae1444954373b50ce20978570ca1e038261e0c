{"map":"{\"version\":3,\"sources\":[\"C:\\\\robot-factory\\\\src\\\\components\\\\Card.js\",\"C:\\\\robot-factory\\\\src\\\\components\\\\CardList.js\",\"C:\\\\robot-factory\\\\src\\\\components\\\\SerachBox.js\",\"C:\\\\robot-factory\\\\src\\\\components\\\\Scroll.js\",\"C:\\\\robot-factory\\\\src\\\\containers\\\\App.js\",\"C:\\\\robot-factory\\\\src\\\\serviceWorker.js\",\"C:\\\\robot-factory\\\\src\\\\index.js\"],\"names\":[\"Card\",\"_ref\",\"name\",\"email\",\"id\",\"react_default\",\"a\",\"createElement\",\"className\",\"alt\",\"src\",\"concat\",\"CardList\",\"robots\",\"map\",\"user\",\"i\",\"components_Card\",\"key\",\"SearchBox\",\"searchfield\",\"searchChange\",\"type\",\"placeholder\",\"onChange\",\"Scroll\",\"props\",\"style\",\"overflow\",\"height\",\"children\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"onSearchChange\",\"event\",\"setState\",\"target\",\"value\",\"state\",\"_this2\",\"fetch\",\"then\",\"response\",\"json\",\"users\",\"_this$state\",\"filteredRobots\",\"filter\",\"robot\",\"toLowerCase\",\"includes\",\"length\",\"SerachBox\",\"components_Scroll\",\"components_CardList\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_containers_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"yNAceA,EAZF,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,KAAKC,EAAcF,EAAdE,MAAMC,EAAQH,EAARG,GAEtB,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,0CACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAI,OAAOC,IAAG,wBAAAC,OAA0BP,EAA1B,mBACnBC,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAKL,GACLG,EAAAC,EAAAC,cAAA,IAAA,KAAIJ,MCcCS,EArBE,SAAAX,GAAc,IAAZY,EAAYZ,EAAZY,OACf,OACIR,EAAAC,EAAAC,cAAA,MAAA,KAEQM,EAAOC,IAAI,SAACC,EAAKC,GACb,OACAX,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAKF,EACLZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCE1BgB,EAZG,SAAAlB,GAAgCA,EAA9BmB,YAA8B,IAAlBC,EAAkBpB,EAAlBoB,aAC5B,OACIhB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,QAAA,CACIC,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAXI,EAPA,SAACC,GACZ,OACIrB,EAAAC,EAAAC,cAAA,MAAA,CAAKoB,MAAO,CAAEC,SAAS,SAASC,OAAO,UAClCH,EAAMI,WC0CJC,qBAxCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAACrB,YAAYoB,EAAME,OAAOC,SAbxCX,EAAKY,MAAO,CACR/B,OAAS,GACTO,YAAc,IAJTY,mFAQM,IAAAa,EAAAV,KACfW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAC5B,OAASqC,uCAOnC,IAAAC,EACyBhB,KAAKS,MAA3B/B,EADHsC,EACGtC,OAAOO,EADV+B,EACU/B,YACRgC,EAAiBvC,EAAOwC,OAAO,SAAAC,GACjC,OAAOA,EAAMpD,KAAKqD,cAAcC,SAASpC,EAAYmC,iBAGzD,OAAQ1C,EAAO4C,OAGPpD,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAACmD,EAAD,CAAWrC,aAAcc,KAAKI,iBAC9BlC,EAAAC,EAAAC,cAACoD,EAAD,KACItD,EAAAC,EAAAC,cAACqD,EAAD,CAAU/C,OAAQuC,MAN7B/C,EAAAC,EAAAC,cAAA,KAAA,KAAA,kBA1BKsD,EAAAA,YCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,EAAAA,EAASC,OACL/D,EAAAC,EAAAC,cAAC8D,EAAD,MACFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\n\\nconst Card = ({name,email,id}) => {\\n  // const {name,email,id}=props;\\n    return (\\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow'>\\n        <img alt='robo' src={`https://robohash.org/${id}?size=200x200`}></img>\\n        <div>\\n          <h2>{name}</h2>\\n          <p>{email}</p>\\n        </div>\\n      </div>\\n    );\\n}\\nexport default Card;\\n\",\"import React from 'react';\\r\\nimport Card from './Card';\\r\\nconst CardList = ({robots}) => {\\r\\n    return(\\r\\n        <div>\\r\\n            {\\r\\n                robots.map((user,i)=>{\\r\\n                    return (\\r\\n                    <Card\\r\\n                        key={i}\\r\\n                        id={robots[i].id}\\r\\n                        name={robots[i].name}\\r\\n                        email={robots[i].email}\\r\\n                    />\\r\\n                    );\\r\\n                })\\r\\n            }\\r\\n            {/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\\r\\n            <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\\r\\n            <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/> */}\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\nexport default CardList;\",\"import React from 'react';\\r\\n\\r\\nconst SearchBox = ({searchfield,searchChange}) => {\\r\\n    return(\\r\\n        <div className='pa2'>\\r\\n            <input \\r\\n                className='pa3 ba b--green bg-lightest-blue'\\r\\n                type='search' \\r\\n                placeholder='search robots'\\r\\n                onChange={searchChange}\\r\\n            />\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\nexport default SearchBox;\",\"import React from 'react';\\r\\n\\r\\nconst Scroll = (props) => {\\r\\n    return (\\r\\n        <div style={{ overflow:'scroll',height:'500px'}}>\\r\\n            {props.children}\\r\\n        </div>\\r\\n    )\\r\\n}\\r\\nexport default Scroll;\",\"import React,{Component} from 'react';\\r\\nimport CardList from '../components/CardList';\\r\\nimport SearchBox from '../components/SerachBox';\\r\\nimport Scroll from '../components/Scroll';\\r\\nimport '../containers/App.css';\\r\\n\\r\\nclass App extends Component{\\r\\n    constructor(){\\r\\n        super()\\r\\n        this.state ={\\r\\n            'robots':[],\\r\\n            'searchfield':''\\r\\n        }\\r\\n    }\\r\\n\\r\\n    componentDidMount(){\\r\\n        fetch('https://jsonplaceholder.typicode.com/users')\\r\\n        .then(response=> response.json())\\r\\n        .then(users => this.setState({'robots':users}));\\r\\n    }\\r\\n\\r\\n    onSearchChange = (event) =>{\\r\\n        this.setState({searchfield:event.target.value});  \\r\\n    }\\r\\n\\r\\n    render(){\\r\\n        const {robots,searchfield} = this.state;\\r\\n        const filteredRobots = robots.filter(robot=>{\\r\\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\\r\\n        })\\r\\n        //loading \\r\\n        return !robots.length?\\r\\n             <h1>Loading</h1>:\\r\\n            (\\r\\n                <div className='tc'>\\r\\n                    <h1 className='f2'>Robo Factory</h1>\\r\\n                    <SearchBox searchChange={this.onSearchChange} />\\r\\n                    <Scroll>\\r\\n                        <CardList robots={filteredRobots} />\\r\\n                    </Scroll>\\r\\n                    \\r\\n                </div>\\r\\n            );\\r\\n    }\\r\\n    \\r\\n}\\r\\n\\r\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './containers/App';\\nimport * as serviceWorker from './serviceWorker';\\nimport 'tachyons';\\n\\nReactDOM.render(\\n    <App/>\\n, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,t,n){},16:function(e,t,n){},20:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(2),c=n.n(o),l=(n(14),n(3)),i=n(4),s=n(6),u=n(5),h=n(7),m=function(e){var t=e.name,n=e.email,a=e.id;return r.a.createElement(\"div\",{className:\"tc bg-light-green dib br3 pa3 ma2 grow\"},r.a.createElement(\"img\",{alt:\"robo\",src:\"https://robohash.org/\".concat(a,\"?size=200x200\")}),r.a.createElement(\"div\",null,r.a.createElement(\"h2\",null,t),r.a.createElement(\"p\",null,n)))},d=function(e){var t=e.robots;return r.a.createElement(\"div\",null,t.map(function(e,n){return r.a.createElement(m,{key:n,id:t[n].id,name:t[n].name,email:t[n].email})}))},f=function(e){e.searchfield;var t=e.searchChange;return r.a.createElement(\"div\",{className:\"pa2\"},r.a.createElement(\"input\",{className:\"pa3 ba b--green bg-lightest-blue\",type:\"search\",placeholder:\"search robots\",onChange:t}))},b=function(e){return r.a.createElement(\"div\",{style:{overflow:\"scroll\",height:\"500px\"}},e.children)},g=(n(16),function(e){function t(){var e;return Object(l.a)(this,t),(e=Object(s.a)(this,Object(u.a)(t).call(this))).onSearchChange=function(t){e.setState({searchfield:t.target.value})},e.state={robots:[],searchfield:\"\"},e}return Object(h.a)(t,e),Object(i.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;fetch(\"https://jsonplaceholder.typicode.com/users\").then(function(e){return e.json()}).then(function(t){return e.setState({robots:t})})}},{key:\"render\",value:function(){var e=this.state,t=e.robots,n=e.searchfield,a=t.filter(function(e){return e.name.toLowerCase().includes(n.toLowerCase())});return t.length?r.a.createElement(\"div\",{className:\"tc\"},r.a.createElement(\"h1\",{className:\"f2\"},\"Robo Factory\"),r.a.createElement(f,{searchChange:this.onSearchChange}),r.a.createElement(b,null,r.a.createElement(d,{robots:a}))):r.a.createElement(\"h1\",null,\"Loading\")}}]),t}(a.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n(18);c.a.render(r.a.createElement(g,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,t,n){e.exports=n(20)}},[[8,2,1]]]);","extractedComments":[]}